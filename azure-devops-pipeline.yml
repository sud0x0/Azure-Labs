# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
- template: vars_az.yml

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: tfinit
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(service_connection_name)'
              backendAzureRmResourceGroupName: '$(rg_name)'
              backendAzureRmStorageAccountName: '$(storage_account_name)'
              backendAzureRmContainerName: '$(container_name)'
              backendAzureRmKey: '$(tfstate_file_name)'
          - task: TerraformTaskV4@4
            displayName: tfvalidate
            inputs:
              provider: 'azurerm'
              command: 'validate'
  - stage: tfdeploy
    condition: and(succeeded('tfvalidate'), eq(variables['requirenment'],'build'))
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: tfinit
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(service_connection_name)'
              backendAzureRmResourceGroupName: '$(rg_name)'
              backendAzureRmStorageAccountName: '$(storage_account_name)'
              backendAzureRmContainerName: '$(container_name)'
              backendAzureRmKey: '$(tfstate_file_name)'
          - task: TerraformTaskV4@4
            displayName: tfplan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: '$(service_connection_name)'
          - task: TerraformTaskV4@4
            displayName: tfapply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: '$(service_connection_name)'
  - stage: tfdestroy
    condition: and(succeeded('tfvalidate'), eq(variables['requirenment'],'destroy'))
    jobs:
      - job: destroy
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: tfinit
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(service_connection_name)'
              backendAzureRmResourceGroupName: '$(rg_name)'
              backendAzureRmStorageAccountName: '$(storage_account_name)'
              backendAzureRmContainerName: '$(container_name)'
              backendAzureRmKey: '$(tfstate_file_name)'
          - task: TerraformTaskV4@4
            displayName: tfplan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: '$(service_connection_name)'
          - task: TerraformTaskV4@4
            displayName: tfdestroy
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              environmentServiceNameAzureRM: '$(service_connection_name)'
